# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/msgpack/all/msgpack.rbi
#
# msgpack-1.3.3

module MessagePack
  def dump(v, *rest); end
  def load(src, param = nil); end
  def pack(v, *rest); end
  def self.dump(v, *rest); end
  def self.load(src, param = nil); end
  def self.pack(v, *rest); end
  def self.unpack(src, param = nil); end
  def unpack(src, param = nil); end
end
class MessagePack::Packer
  def registered_types; end
  def type_registered?(klass_or_type); end
end
class MessagePack::Unpacker
  def registered_types; end
  def type_registered?(klass_or_type); end
end
class MessagePack::Factory
  def dump(v, *rest); end
  def load(src, param = nil); end
  def pack(v, *rest); end
  def registered_types(selector = nil); end
  def type_registered?(klass_or_type, selector = nil); end
  def unpack(src, param = nil); end
end
class Symbol
  def self.from_msgpack_ext(data); end
  def to_msgpack_ext; end
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
module MessagePack::CoreExt
  def to_msgpack(packer_or_io = nil); end
end
class NilClass
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
class TrueClass
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
class FalseClass
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
class Float < Numeric
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
class String
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
class Array
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
class Hash
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
class Integer < Numeric
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
class MessagePack::ExtensionValue < Struct
  def to_msgpack_with_packer(packer); end
  include MessagePack::CoreExt
end
class MessagePack::Timestamp
  def ==(other); end
  def initialize(sec, nsec); end
  def nsec; end
  def sec; end
  def self.from_msgpack_ext(data); end
  def self.to_msgpack_ext(sec, nsec); end
  def to_msgpack_ext; end
end
module MessagePack::Time
end
