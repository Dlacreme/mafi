# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pg/all/pg.rbi
#
# pg-1.2.3

module PG
  def self.connect(*args); end
  def self.version_string(include_buildnum = nil); end
end
class PG::Error < StandardError
end
module PG::Constants
end
class PG::Coder
  def ==(v); end
  def dup; end
  def initialize(params = nil); end
  def inspect; end
  def inspect_short; end
  def marshal_dump; end
  def marshal_load(str); end
  def to_h; end
end
module PG::Coder::BinaryFormatting
  def initialize(params = nil); end
end
class PG::CompositeCoder < PG::Coder
  def inspect; end
  def to_h; end
end
class PG::CopyCoder < PG::Coder
  def to_h; end
end
class PG::RecordCoder < PG::Coder
  def to_h; end
end
module PG::BinaryDecoder
end
class PG::BinaryDecoder::TimestampUtc < PG::BinaryDecoder::Timestamp
  def initialize(params = nil); end
end
class PG::BinaryDecoder::TimestampUtcToLocal < PG::BinaryDecoder::Timestamp
  def initialize(params = nil); end
end
class PG::BinaryDecoder::TimestampLocal < PG::BinaryDecoder::Timestamp
  def initialize(params = nil); end
end
module PG::TextEncoder
end
class PG::TextEncoder::Date < PG::SimpleEncoder
  def encode(value); end
end
class PG::TextEncoder::TimestampWithoutTimeZone < PG::SimpleEncoder
  def encode(value); end
end
class PG::TextEncoder::TimestampUtc < PG::SimpleEncoder
  def encode(value); end
end
class PG::TextEncoder::TimestampWithTimeZone < PG::SimpleEncoder
  def encode(value); end
end
class PG::TextEncoder::JSON < PG::SimpleEncoder
  def encode(value); end
end
class PG::TextEncoder::Inet < PG::SimpleEncoder
  def encode(value); end
end
module PG::TextDecoder
end
class PG::TextDecoder::Date < PG::SimpleDecoder
  def decode(string, tuple = nil, field = nil); end
end
class PG::TextDecoder::JSON < PG::SimpleDecoder
  def decode(string, tuple = nil, field = nil); end
end
class PG::TextDecoder::TimestampUtc < PG::TextDecoder::Timestamp
  def initialize(params = nil); end
end
class PG::TextDecoder::TimestampUtcToLocal < PG::TextDecoder::Timestamp
  def initialize(params = nil); end
end
class PG::TextDecoder::TimestampLocal < PG::TextDecoder::Timestamp
  def initialize(params = nil); end
end
module PG::BasicTypeRegistry
  def build_coder_maps(connection); end
  def check_format_and_direction(format, direction); end
  def self.alias_type(format, new, old); end
  def self.register_coder(coder); end
  def self.register_type(format, name, encoder_class, decoder_class); end
  def supports_ranges?(connection); end
end
class PG::BasicTypeRegistry::CoderMap
  def coder_by_name(name); end
  def coder_by_oid(oid); end
  def coders; end
  def coders_by_name; end
  def coders_by_oid; end
  def initialize(result, coders_by_name, format, arraycoder); end
  def typenames_by_oid; end
end
class PG::BasicTypeMapForResults < PG::TypeMapByOid
  def initialize(connection); end
  include PG::BasicTypeRegistry
end
class PG::BasicTypeMapForResults::WarningTypeMap < PG::TypeMapInRuby
  def initialize(typenames); end
  def typecast_result_value(result, _tuple, field); end
end
class PG::BasicTypeMapBasedOnResult < PG::TypeMapByOid
  def initialize(connection); end
  include PG::BasicTypeRegistry
end
class PG::BasicTypeMapForQueries < PG::TypeMapByClass
  def array_encoders_by_klass; end
  def coder_by_name(format, direction, name); end
  def encode_array_as; end
  def encode_array_as=(pg_type); end
  def get_array_type(value); end
  def init_encoders; end
  def initialize(connection); end
  def populate_encoder_list; end
  include PG::BasicTypeRegistry
end
class PG::TypeMapByColumn < PG::TypeMap
  def inspect; end
  def oids; end
end
class PG::Connection
  def conndefaults; end
  def conndefaults_hash; end
  def conninfo_hash; end
  def copy_data(sql, coder = nil); end
  def query(*arg0); end
  def self.async_api=(enable); end
  def self.conndefaults_hash; end
  def self.isthreadsafe; end
  def self.parse_connect_args(*args); end
  def self.quote_connstr(value); end
  def ssl_attributes; end
end
class PG::Result < Data
  def field_names_as(type); end
  def inspect; end
  def map_types!(type_map); end
end
class PG::Tuple
  def each_key(&block); end
  def has_key?(key); end
  def inspect; end
  def key?(key); end
  def keys; end
end
class PG::NotAllCopyDataRetrieved < PG::Error
end
